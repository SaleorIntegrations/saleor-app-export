"""Date with time (isoformat)"""
scalar DateTime

enum ExportObjectTypesEnum {
  PRODUCTS
  ORDERS
}

input ExportOrdersInput {
  columns: OrderSelectedColumnsInput!
  filter: OrderFilterInfo = null
}

input ExportProductsInput {
  columns: ProductSelectedColumnsInput!
  filter: ProductFilterInfo = null
}

type Job {
  id: Int!
  createdAt: DateTime!
  report: Report!
}

type Mutation {
  createOrdersReport(input: ExportOrdersInput!): ReportResponse!
  updateOrdersReport(reportId: Int!, input: ExportOrdersInput!): ReportResponse!
  createProductsReport(input: ExportProductsInput!): ReportResponse!
  updateProductsReport(reportId: Int!, input: ExportProductsInput!): ReportResponse!
  runReport(reportId: Int!): RunReportResponse!
}

enum OrderFieldEnum {
  ID
  NUMBER
  CREATED
  CHANNEL
  LANGUAGE_CODE
  SHIPPING_METHOD
  CURRENCY
  TOTAL
  SUBTOTAL
  SHIPPING_PRICE
  USER_EMAIL
  SHIPPING_ADDRESS
  BILLING_ADDRESS
  LINES_SKU
  PAYMENT_STATUS
  GATEWAY
  PAYMENT_METHOD_TYPE
  TOTAL_BALANCE
  TOTAL_CAPTURED
  TOTAL_AUTHORIZED
  STATUS
  TRACKING_NUMBER
}

input OrderFilterInfo {
  filterStr: String!
}

type OrderSelectedColumnsInfo {
  fields: [OrderFieldEnum!]!
}

input OrderSelectedColumnsInput {
  fields: [OrderFieldEnum!]!
}

enum ProductFieldEnum {
  ID
  NAME
  DESCRIPTION
  PRODUCT_TYPE
  CATEGORY
  PRODUCT_WEIGHT
  COLLECTIONS
  CHARGE_TAXES
  PRODUCT_MEDIA
  VARIANT_ID
  VARIANT_SKU
  VARIANT_WEIGHT
  VARIANT_MEDIA
}

input ProductFilterInfo {
  filterStr: String!
}

type ProductSelectedColumnsInfo {
  fields: [ProductFieldEnum!]!
  attributes: [String!]
  warehouses: [String!]
  channels: [String!]
}

input ProductSelectedColumnsInput {
  fields: [ProductFieldEnum!]!
  attributes: [String!] = []
  warehouses: [String!] = []
  channels: [String!] = []
}

type Query {
  report(id: Int!): Report
  job(id: Int!): Job
  reports: ReportConnection!
}

type Report {
  id: Int!
  type: ExportObjectTypesEnum!
  filter: String
  columns: SelectedColumnsInfo!
}

type ReportConnection {
  edges: [ReportEdge!]!
  totalCount: Int!
}

type ReportEdge {
  node: Report!
  cursor: String!
}

type ReportError {
  code: ReportErrorCode!
  message: String!
  field: String!
}

enum ReportErrorCode {
  NOT_FOUND
  INVALID_TYPE
  INVALID_FILTER
  LIMIT_EXCEEDED
}

type ReportResponse {
  report: Report
  errors: [ReportError!]!
}

type RunReportResponse {
  job: Job
}

union SelectedColumnsInfo = ProductSelectedColumnsInfo | OrderSelectedColumnsInfo
